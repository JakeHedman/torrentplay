#! /usr/bin/python
#coding: utf-8

# Requirements:
#   Python packages:
#     - easy_install transmissionrpc
#     - easy_install configobj
#
#   Packages/Apps:
#     - unrar
#     - Transmission with remote access enabled
# 
#   If you're use Linux:
#    - mplayer
#    - Python 2.x (Modify hashbang)

# TODO:
# - rtorrent support


from configobj import ConfigObj
from validate import Validator
import os
import re
import subprocess
import sys
import time
import transmissionrpc

home = os.getenv('USERPROFILE') or os.getenv('HOME')
config = ConfigObj(
		"%s/%s" % (home, '.torrentplay'),
		indent_type = "    ",
		configspec = "%s/configspec" % (sys.path[0]),
	)

validator = Validator()
if not config.validate(validator, copy=True):
    print 'Config file validation failed! try $ rm ~/.torrentplay'
    sys.exit(1)
config.write()

tc = transmissionrpc.Client(
		port = config['transmission']['port'],
		user = config['transmission']['username'],
		password = config['transmission']['password'],
	)
tpath = os.path.abspath(sys.argv[1])
t = tc.add_torrent(tpath) # Torrent object
if config['rm_torrent']:
	os.unlink(tpath)
t.update()

completed = [] # Container for downloaded and extracted rar files

downloading = True # Fake value for first iteration
while downloading:
	try:
		t.update() # Fetch new torrent info	
		# Separate rar files and other files
		rars = []
		misc = []
		for fid in t.files():
			f = t.files()[fid]
			f['id'] = fid
			patterns = [
					r"\.rar$",			# .rar
					r"\.[r-t]\d{2}$",	# .r02
				]
			
			if any([re.search(pattern, f['name']) for pattern in patterns]) and f['name'].count("/") == 1:
				rars.append(f)
			else:
				misc.append(f)

		# Sort by name
		rars = sorted(rars, key=lambda k: k['name'])

		# Move .rar to beginning of the list
		for key, f in enumerate(rars):
			if f['name'][-4:].lower() == ".rar":
				rars.insert(0, rars.pop(key))
				break
		
		# Check for new finished files
		for i, f in enumerate(rars):
			# Stop when unfinished file is found
			if f['completed'] < f['size']:
				break

			# If new file completed
			if f['name'] not in [x['name'] for x in completed]:
				# If the file is the first one
				if i == 0:
					print "Extracting first file %s" % f['name']
					nullw = open('/dev/null', 'w')

					rarpath = "%s/%s" % (tc.session.download_dir, f['name'])
					assert os.path.exists(rarpath)

					# Find name of video file
					cmd = ['unrar', 'vb', rarpath]
					p = subprocess.Popen(cmd, stdout=subprocess.PIPE)
					video_file = p.communicate()[0].strip()
					extension = "".join(video_file.split(".")[-1:])

					# Create and open target
					target_dir = os.path.realpath(os.path.expanduser(config['path'])) or tc.session.download_dir
					target_path = "%s/%s.%s" % (target_dir, t.name, extension)
					target_write = open(target_path, 'w+')
					cmd = ['unrar', 'p', '-vp', '-inul', rarpath]
					p = subprocess.Popen(cmd, stdout=target_write, stdin=subprocess.PIPE, stderr=nullw)
					
					print "Playing %s.%s" % (t.name, extension)
					if sys.platform == "darwin":
						subprocess.call(['open', target_path])
					elif "linux" in sys.platform:
						subprocess.call(['mplayer', target_path])
					else:
						exit("Unknown platform, why the face?")
				else:
					print "Extracting next rar: %s" % f['name'].split("/")[-1:][0]
					p.stdin.write("C\n")

				completed.append({"name": f['name'], "size": os.path.getsize(tc.session.download_dir + "/" +  f['name']), 'deleted': False})

		queue = rars + misc
		downloading = 0 # Number of ongoing downloads
		new_files = {}
		
		# Send updates to client
		for f in queue:
			filedict = {
					'priority': 'low',
					'selected': False,
				}

			if f['completed'] < f['size'] and downloading < config['simultan']:
				filedict['selected'] = True
				if downloading == 0:
					filedict['priority'] = 'high'
				elif downloading == 1:
					filedict['priority'] = 'normal'
				else:
					filedict['priority'] = 'low'

				downloading += 1
			new_files[f['id']] = filedict

		tc.set_files({t.id: new_files})

		# Check for files done extracting and purge them
		if config['rm_files']:
			# Keep track of size to avoid deleting a .rar before unrar is done
			# with it
			tot = 0
			for f in completed:
				tot += f['size']
				if not f['deleted']:
					if f['name'] in [x['name'] for x in rars]:
						if os.path.getsize(target_path) > tot:
							print "Deleting rar: %s" % f['name'].split("/")[-1:][0]
							os.unlink("%s/%s" % (tc.session.download_dir, f['name']))
							f['deleted'] = True
	except Exception, err:
		print Exception, err
		print "Something went wrong.. trying again"
		print
	time.sleep(1)

print "Done downloading"
p.wait()
print "Done extracting"
if config['rm_files']:
	tc.remove_torrent(t.id, delete_data=True)
elif not config['seed']:
	tc.remove_torrent(t.id, delete_data=False)
