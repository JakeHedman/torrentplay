#! /usr/bin/python
#coding: utf-8

# Requirements:
#   Python packages:
#     - easy_install transmissionrpc
#
#   Packages/Apps:
#     - unrar
#     - Transmission with remote access enabled
# 
#   Linux only
#    - mplayer
#    - Python 2.x (Modify hashbang)

# TODO:
# - Settings
#   - Port
#   - Auth
#   - Number of simultaneous downloads
#   - Delete .torrent
#   - Delete data
#   - Path
# - rtorrent support

import os
import re
import subprocess
import sys
import time
import transmissionrpc

tc = transmissionrpc.Client()
tpath = os.path.abspath(sys.argv[1])
t = tc.add_torrent(tpath)
os.unlink(tpath) # Delete .torrent

# Wait for initial file list
while not t.files():
	t.update()
	time.sleep(0.1)

completed = [] # Container for downloaded and extracted rar files

downloading = True # Fake value for first iteration
while downloading:
	t.update() # Fetch new torrent info
	
	# Separate rar files and other files
	rars = []
	misc = []
	for fid in t.files(): # Iterate over file IDs
		f = t.files()[fid]
		f['id'] = fid
		patterns = [
				r"\.rar$",			# .rar
				r"\.[r-t]\d{2}$",	# .r02
			]

		if any([re.search(pattern, f['name']) for pattern in patterns]):
			rars.append(f)
		else:
			misc.append(f)

	# Sort by name
	rars = sorted(rars, key=lambda k: k['name'])

	# Move .rar to beginning of the list
	for key, f in enumerate(rars):
		if f['name'][-4:].lower() == ".rar":
			rars.insert(0, rars.pop(key))
			break
	
	# Check for new finished files
	for i, f in enumerate(rars):
		# Stop when unfinished file is found
		if f['completed'] < f['size']:
			break

		# If new file completed
		if f['name'] not in completed:
			# If the file is the first one
			if i == 0:
				print "Extracting first file %s" % f['name']
				nullw = open('/dev/null', 'w')

				rarpath = "%s/%s" % (tc.session.download_dir, f['name'])
				assert os.path.exists(rarpath)

				# Find name of video file
				cmd = ['unrar', 'vb', rarpath]
				p = subprocess.Popen(cmd, stdout=subprocess.PIPE)
				video_file = p.communicate()[0].strip()

				# Create and open target
				target_path = "%s/%s" % (tc.session.download_dir, video_file)
				target_write = open(target_path, 'w+')
				cmd = ['unrar', 'p', '-vp', '-inul', rarpath]
				p = subprocess.Popen(cmd, stdout=target_write, stdin=subprocess.PIPE, stderr=nullw)
				
				print "Playing %s" % video_file
				if sys.platform == "darwin":
					subprocess.call(['mplayer', target_path])
				elif "linux" in sys.platform:
					subprocess.call(['open', target_path])
				else:
					exit("Unknown platform, why the face?")
			else:
				p.stdin.write("C\n")
				print "Extracting next file %s" % f['name']
			completed.append(f['name'])
	
	queue = rars + misc
	downloading = 0 # Number of ongoing downloads
	new_files = {t.id: {}}

	for f in queue:
		filedict = {
				'priority': 'low',
				'selected': False,
			}

		if f['completed'] < f['size'] and downloading < 3:
			filedict['selected'] = True
			if downloading == 0:
				filedict['priority'] = 'high'
			downloading += 1
		new_files[t.id][f['id']] = filedict

	tc.set_files(new_files)
	time.sleep(3)

print "Done downloading"
p.wait()
print "Done extracting"
tc.remove_torrent(t.id, delete_data=True)
